apply plugin: 'war'
apply plugin: 'liberty'
apply plugin: 'java'

group 'org.example'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// configure liberty-gradle-plugin
buildscript {
    setArchivesBaseName("TravelService")
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'io.openliberty.tools:liberty-gradle-plugin:3.1.2'
    }
}

repositories {
    mavenCentral()
    // TODO Verweis?
    def github = ivy {
        url 'https://github.com/'
        patternLayout {
            artifact '/[organisation]/[module]/releases/download/[revision]/liberty-opentracing-zipkintracer-[revision]-sample.[ext]'
        }
        metadataSources { artifact() }
    }
    exclusiveContent {
        forRepositories(github)
        filter { includeGroup("WASdev") }
    }
}

dependencies {
    compile project(":TravelService-API")
    compile project(":HotelService-API")
    compile project(":FlightService-API")

    // Javax persistence
    compile "javax.persistence:javax.persistence-api:2.2"

    // Eclipse MicroProfile using OpenLiberty implementation
    providedCompile "jakarta.platform:jakarta.jakartaee-api:8.0.0"
    providedCompile "org.eclipse.microprofile:microprofile:4.0.1"

    // Eclipse MicroProfile LRA
    implementation "org.eclipse.microprofile.lra:microprofile-lra-api:1.0-RC3"
    libertyRuntime "io.openliberty.beta:openliberty-runtime:21.0.0.7-beta"

    // Enable Zipkin Tracing
    // Downloaded from: https://github.com/WASdev/sample.opentracing.zipkintracer/releases/download/2.0.1/liberty-opentracing-zipkintracer-2.0.1-sample.zip
    compile "WASdev:sample.opentracing.zipkintracer:2.0.1@zip"

    // Enable Jaeger Tracing --> activate line to use Jaeger tracing
//    compile "io.jaegertracing:jaeger-client:1.6.0"

    // MySQL
    compile "mysql:mysql-connector-java:$mySQLVersion"

    // General Testing dependencies
    testCompile "junit:junit:4.12"
    testCompile 'org.junit.jupiter:junit-jupiter:5.7.2'
    testCompile "org.mockito:mockito-core:2.23.0"
    testCompile "jakarta.json:jakarta.json-api:2.0.1"
    testCompile "org.glassfish:jakarta.json:2.0.1"

    // For integration testing
    testCompile "org.microshed:microshed-testing-liberty:0.9.1"
    testCompile "org.microshed:microshed-testing-testcontainers:0.9.1"
    testCompile "org.testcontainers:testcontainers:1.15.3"
}

test {
    useJUnitPlatform()
}

task copyDependenciesToOpenLiberty(type: Copy) {
    from configurations.compile
    include 'mysql-connector-java-*.jar'
    into "$buildDir/wlp/usr/servers/TravelServiceServer/jdbc"
}

task copyDependenciesToLibs(type: Copy) {
    from configurations.compile
    include 'mysql-connector-java-*.jar'
    include 'sample.opentracing.zipkintracer-*'
    into "$buildDir/libs"
}

task unzipZipkinTracer(type: Copy) {
    def zipkinTracerPath = project.configurations.compile.find {it.name.startsWith("sample.opentracing.zipkin") }
    println zipkinTracerPath
    def ZipkinTracerZipFile = file(zipkinTracerPath)

    from zipTree(ZipkinTracerZipFile)
    into "$buildDir/libs"
}

task unzipZipkinTracerToOpenLiberty(type: Copy) {
    def zipkinTracerPath = project.configurations.compile.find {it.name.startsWith("sample.opentracing.zipkin") }
    println zipkinTracerPath
    def ZipkinTracerZipFile = file(zipkinTracerPath)

    from zipTree(ZipkinTracerZipFile)
    into "$buildDir/wlp/usr/servers/TravelServiceServer"
}

liberty {
    server {
        name = "TravelServiceServer"
    }
}

build.dependsOn 'copyDependenciesToLibs'
copyDependenciesToLibs.finalizedBy 'unzipZipkinTracer'
deploy.finalizedBy 'copyDependenciesToOpenLiberty'
deploy.finalizedBy 'unzipZipkinTracerToOpenLiberty'
libertyDev.dependsOn 'deploy'
clean.dependsOn 'libertyStop'
test.dependsOn 'war'